{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"TensorCross pip install tensorcross Cross Validation, Grid Search and Random Search for tf.data.Datasets in TensorFlow 2.0-2.4 and Python 3.8. Motivation Currently, there is the tf.keras.wrapper.KerasClassifier/KerasRegressor class, which can be used to transform your tf.keras model into a sklearn estimator. However, this approach is only applicable if your dataset is a numpy.ndarray for your x and y data. If you want to use the new tf.data.Dataset class, you cannot use the sklearn wrappers. This python package aims to help with this use-case. API GridSearch GridSearchCV For more examples see: here Dataset and TensorFlow Model for the Examples import tensorflow as tf dataset = tf.data.Dataset.from_tensor_slices( (np.array([1, 2, 3]).reshape(-1, 1), # x np.array([-1, -2, -3]).reshape(-1, 1)) # y ) def build_model( optimizer: tf.keras.optimizers.Optimizer, learning_rate: float ) -> tf.keras.models.Model: x_input = tf.keras.layers.Input(shape=2) y_pred = tf.keras.layers.Dense(units=1)(x_input) model = tf.keras.models.Model(inputs=[x_input], outputs=[y_pred]) opt = optimizer(learning_rate=learning_rate) model.compile( loss=\"mse\", optimizer=opt, metrics=[\"mse\"] ) return model The dataset must be a tf.data.Dataset object and you have to define a function/callable that returns a compiled tf.keras.models.Model object. This object will then be trained in e.g. the GridSearch. GridSearch Example Assuming you have a tf.data.Dataset object and a build_model function, defined as above. You can run a GridSearch as below: from tensorcross.model_selection GridSearch train_dataset, val_dataset = dataset_split( dataset=dataset, split_fraction=(1 / 3) ) param_grid = { \"optimizer\": [ tf.keras.optimizers.Adam, tf.keras.optimizers.RMSprop ], \"learning_rate\": [0.001, 0.0001] } grid_search = GridSearch( model_fn=build_model, param_grid=param_grid, verbose=1, num_features=1, num_targets=1 ) grid_search.fit( train_dataset=train_dataset, val_dataset=val_dataset, epochs=1, verbose=1 ) grid_search.summary() This would result in the following console output: -------------------------------------------------- Best score: 1.1800532341003418 using params: { 'learning_rate': 0.001, 'optimizer': 'RMSprop' } -------------------------------------------------- Idx: 0 - Score: 0.2754371166229248 with param: { 'learning_rate': 0.001, 'optimizer': 'Adam' } Idx: 1 - Score: 1.1800532341003418 with param: { 'learning_rate': 0.001, 'optimizer': 'RMSprop' } Idx: 2 - Score: 0.055416107177734375 with param: { learning_rate': 0.0001, 'optimizer': 'Adam' } Idx: 3 - Score: 0.12417340278625488 with param: { 'learning_rate': 0.0001, 'optimizer': 'RMSprop' } -------------------------------------------------- GridSearchCV Example Assuming you have a tf.data.Dataset object and a build_model function, defined as above. You can run a GridSearchCV as below: from tensorcross.model_selection GridSearchCV param_grid = { \"optimizer\": [ tf.keras.optimizers.Adam, tf.keras.optimizers.RMSprop ], \"learning_rate\": [0.001, 0.0001] } grid_search_cv = GridSearchCV( model_fn=build_model, param_grid=param_grid, n_folds=2, verbose=1, num_features=1, num_targets=1 ) grid_search_cv.fit( dataset=dataset, epochs=1, verbose=1 ) grid_search_cv.summary() This would result in the following console output: -------------------------------------------------- Best score: 1.1800532341003418 using params: { 'learning_rate': 0.001, 'optimizer': 'RMSprop' } -------------------------------------------------- Idx: 0 - Score: 0.2754371166229248 with param: { 'learning_rate': 0.001, 'optimizer': 'Adam' } Idx: 1 - Score: 1.1800532341003418 with param: { 'learning_rate': 0.001, 'optimizer': 'RMSprop' } Idx: 2 - Score: 0.055416107177734375 with param: { learning_rate': 0.0001, 'optimizer': 'Adam' } Idx: 3 - Score: 0.12417340278625488 with param: { 'learning_rate': 0.0001, 'optimizer': 'RMSprop' } --------------------------------------------------","title":"Start"},{"location":"#tensorcross","text":"pip install tensorcross Cross Validation, Grid Search and Random Search for tf.data.Datasets in TensorFlow 2.0-2.4 and Python 3.8.","title":"TensorCross"},{"location":"#motivation","text":"Currently, there is the tf.keras.wrapper.KerasClassifier/KerasRegressor class, which can be used to transform your tf.keras model into a sklearn estimator. However, this approach is only applicable if your dataset is a numpy.ndarray for your x and y data. If you want to use the new tf.data.Dataset class, you cannot use the sklearn wrappers. This python package aims to help with this use-case.","title":"Motivation"},{"location":"#api","text":"GridSearch GridSearchCV For more examples see: here","title":"API"},{"location":"#dataset-and-tensorflow-model-for-the-examples","text":"import tensorflow as tf dataset = tf.data.Dataset.from_tensor_slices( (np.array([1, 2, 3]).reshape(-1, 1), # x np.array([-1, -2, -3]).reshape(-1, 1)) # y ) def build_model( optimizer: tf.keras.optimizers.Optimizer, learning_rate: float ) -> tf.keras.models.Model: x_input = tf.keras.layers.Input(shape=2) y_pred = tf.keras.layers.Dense(units=1)(x_input) model = tf.keras.models.Model(inputs=[x_input], outputs=[y_pred]) opt = optimizer(learning_rate=learning_rate) model.compile( loss=\"mse\", optimizer=opt, metrics=[\"mse\"] ) return model The dataset must be a tf.data.Dataset object and you have to define a function/callable that returns a compiled tf.keras.models.Model object. This object will then be trained in e.g. the GridSearch.","title":"Dataset and TensorFlow Model for the Examples"},{"location":"#gridsearch-example","text":"Assuming you have a tf.data.Dataset object and a build_model function, defined as above. You can run a GridSearch as below: from tensorcross.model_selection GridSearch train_dataset, val_dataset = dataset_split( dataset=dataset, split_fraction=(1 / 3) ) param_grid = { \"optimizer\": [ tf.keras.optimizers.Adam, tf.keras.optimizers.RMSprop ], \"learning_rate\": [0.001, 0.0001] } grid_search = GridSearch( model_fn=build_model, param_grid=param_grid, verbose=1, num_features=1, num_targets=1 ) grid_search.fit( train_dataset=train_dataset, val_dataset=val_dataset, epochs=1, verbose=1 ) grid_search.summary() This would result in the following console output: -------------------------------------------------- Best score: 1.1800532341003418 using params: { 'learning_rate': 0.001, 'optimizer': 'RMSprop' } -------------------------------------------------- Idx: 0 - Score: 0.2754371166229248 with param: { 'learning_rate': 0.001, 'optimizer': 'Adam' } Idx: 1 - Score: 1.1800532341003418 with param: { 'learning_rate': 0.001, 'optimizer': 'RMSprop' } Idx: 2 - Score: 0.055416107177734375 with param: { learning_rate': 0.0001, 'optimizer': 'Adam' } Idx: 3 - Score: 0.12417340278625488 with param: { 'learning_rate': 0.0001, 'optimizer': 'RMSprop' } --------------------------------------------------","title":"GridSearch Example"},{"location":"#gridsearchcv-example","text":"Assuming you have a tf.data.Dataset object and a build_model function, defined as above. You can run a GridSearchCV as below: from tensorcross.model_selection GridSearchCV param_grid = { \"optimizer\": [ tf.keras.optimizers.Adam, tf.keras.optimizers.RMSprop ], \"learning_rate\": [0.001, 0.0001] } grid_search_cv = GridSearchCV( model_fn=build_model, param_grid=param_grid, n_folds=2, verbose=1, num_features=1, num_targets=1 ) grid_search_cv.fit( dataset=dataset, epochs=1, verbose=1 ) grid_search_cv.summary() This would result in the following console output: -------------------------------------------------- Best score: 1.1800532341003418 using params: { 'learning_rate': 0.001, 'optimizer': 'RMSprop' } -------------------------------------------------- Idx: 0 - Score: 0.2754371166229248 with param: { 'learning_rate': 0.001, 'optimizer': 'Adam' } Idx: 1 - Score: 1.1800532341003418 with param: { 'learning_rate': 0.001, 'optimizer': 'RMSprop' } Idx: 2 - Score: 0.055416107177734375 with param: { learning_rate': 0.0001, 'optimizer': 'Adam' } Idx: 3 - Score: 0.12417340278625488 with param: { 'learning_rate': 0.0001, 'optimizer': 'RMSprop' } --------------------------------------------------","title":"GridSearchCV Example"},{"location":"api/","text":"model_selection special search BaseSearch Abstract BaseSearch class for the grid or random search. Parameters: Name Type Description Default model_fn Callable[..., tf.keras.models.Model] Function that builds and compiles a tf.keras.models.Model object. required verbose int Whether to show information in terminal. Defaults to 0. required kwargs Any Keyword arguments for the model_fn function. required summary ( self ) Prints the summary of the search to the console. Assuming the RandomSearch had n iterations or the GridSearch had n combinations in total, the output would have the following structure:: -------------------------------------------------- Best score: float using params: dict -------------------------------------------------- Idx: 0 - Score: float using params: dict ... Idx: n-1 - Score: float using params: dict -------------------------------------------------- Source code in tensorcross\\model_selection\\search.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def summary ( self ) -> None : \"\"\"Prints the summary of the search to the console. Assuming the *RandomSearch* had n iterations or the *GridSearch* had n combinations in total, the output would have the following structure:: -------------------------------------------------- Best score: ``float`` using params: ``dict`` -------------------------------------------------- Idx: 0 - Score: ``float`` using params: ``dict`` ... Idx: n-1 - Score: ``float`` using params: ``dict`` -------------------------------------------------- \"\"\" best_params_str = ( f \"Best score: { self . results_ [ 'best_score' ] } \" f \"using params: { self . results_ [ 'best_params' ] } \" ) dashed_line = \"\" . join ( map ( lambda x : \"-\" , best_params_str )) print ( f \" \\n { dashed_line } \\n { best_params_str } \\n { dashed_line } \" ) scores = self . results_ [ \"val_scores\" ] params = self . results_ [ \"params\" ] for idx , ( score , param ) in enumerate ( zip ( scores , params )): print ( f \"Idx: { idx } - Score: { score } with param: { param } \" ) print ( f \" { dashed_line } \\n \" ) GridSearch __init__ ( self , model_fn , param_grid , verbose = 0 , ** kwargs ) special GridSearch for a given parameter grid. The grid search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) This would sort the grid search combinations based on the validation mae score. Parameters: Name Type Description Default model_fn Callable[..., tensorflow.python.keras.engine.training.Model] Function that builds and compiles a tf.keras.models.Model object. required param_grid Mapping[str, Iterable] Dict of str, iterable hyperparameter, where the str is the parameter name of the. required verbose int Whether to show information in terminal. Defaults to 0. 0 kwargs Any Keyword arguments for the model_fn function. {} Source code in tensorcross\\model_selection\\search.py 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 def __init__ ( self , model_fn : Callable [ ... , tf . keras . models . Model ], param_grid : Mapping [ str , Iterable ], verbose : int = 0 , ** kwargs : Any ) -> None : \"\"\"GridSearch for a given parameter grid. The grid search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. ```python model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) ``` This would sort the grid search combinations based on the validation mae score. Args: model_fn (Callable[..., tf.keras.models.Model]): Function that builds and compiles a tf.keras.models.Model object. param_grid (Mapping[str, Iterable]): Dict of str, iterable hyperparameter, where the str is the parameter name of the. verbose (int): Whether to show information in terminal. Defaults to 0. kwargs (Any): Keyword arguments for the model_fn function. \"\"\" super () . __init__ ( model_fn = model_fn , verbose = verbose , ** kwargs ) self . param_grid = ParameterGrid ( param_grid ) fit ( self , train_dataset , val_dataset , ** kwargs ) Runs the exhaustive grid search over the parameter grid. Parameters: Name Type Description Default train_dataset DatasetV2 tf.data.Dataset object for the training. required val_dataset DatasetV2 tf.data.Dataset object for the validation. required kwargs Any Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. {} Source code in tensorcross\\model_selection\\search.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 def fit ( self , train_dataset : tf . data . Dataset , val_dataset : tf . data . Dataset , ** kwargs : Any ) -> None : \"\"\"Runs the exhaustive grid search over the parameter grid. Args: train_dataset (tf.data.Dataset): tf.data.Dataset object for the training. val_dataset (tf.data.Dataset): tf.data.Dataset object for the validation. kwargs (Any): Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. \"\"\" super () . _run_search ( train_dataset = train_dataset , val_dataset = val_dataset , parameter_obj = self . param_grid , ** kwargs ) RandomSearch __init__ ( self , model_fn , param_distributions , n_iter = 10 , verbose = 0 , ** kwargs ) special RandomSearch for a given parameter distribution. The random search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) This would sort the random search combinations based on the validation mae score. Parameters: Name Type Description Default model_fn Callable[..., tensorflow.python.keras.engine.training.Model] Function that builds and compiles a tf.keras.models.Model object. required param_distributions Dict[str, Callable] Dict of str, callable pairs, where the str is the parameter name of the. required n_iter int Number of random models. Defaults to 10. 10 verbose int Whether to show information in terminal. Defaults to 0. 0 kwargs Any Keyword arguments for the model_fn function. {} Source code in tensorcross\\model_selection\\search.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 def __init__ ( self , model_fn : Callable [ ... , tf . keras . models . Model ], param_distributions : Dict [ str , Callable ], n_iter : int = 10 , verbose : int = 0 , ** kwargs : Any ) -> None : \"\"\"RandomSearch for a given parameter distribution. The random search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. ```python model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) ``` This would sort the random search combinations based on the validation mae score. Args: model_fn (Callable[..., tf.keras.models.Model]): Function that builds and compiles a tf.keras.models.Model object. param_distributions (Dict[str, Callable]): Dict of str, callable pairs, where the str is the parameter name of the. n_iter (int): Number of random models. Defaults to 10. verbose (int): Whether to show information in terminal. Defaults to 0. kwargs (Any): Keyword arguments for the model_fn function. \"\"\" super () . __init__ ( model_fn = model_fn , verbose = verbose , ** kwargs ) self . param_distributions = param_distributions self . n_iter = n_iter self . random_sampler = ParameterSampler ( self . param_distributions , n_iter = self . n_iter ) fit ( self , train_dataset , val_dataset , ** kwargs ) Runs the random search over the parameter distributions. Parameters: Name Type Description Default train_dataset DatasetV2 tf.data.Dataset object for the training. required val_dataset DatasetV2 tf.data.Dataset object for the validation. required kwargs Any Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. {} Source code in tensorcross\\model_selection\\search.py 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 def fit ( self , train_dataset : tf . data . Dataset , val_dataset : tf . data . Dataset , ** kwargs : Any ) -> None : \"\"\"Runs the random search over the parameter distributions. Args: train_dataset (tf.data.Dataset): tf.data.Dataset object for the training. val_dataset (tf.data.Dataset): tf.data.Dataset object for the validation. kwargs (Any): Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. \"\"\" super () . _run_search ( train_dataset = train_dataset , val_dataset = val_dataset , parameter_obj = self . random_sampler , ** kwargs ) search_cv BaseSearchCV Abstract BaseSearchCV class for the grid or random search with cross validation. Parameters: Name Type Description Default model_fn Callable[..., tf.keras.models.Model] Function that builds and compiles a tf.keras.models.Model object. required n_folds int How many folds. Defaults to 3. required verbose int Whether to show information in terminal. Defaults to 0. required kwargs Any Keyword arguments for the model_fn function. required summary ( self ) Prints the summary of the search to the console. Assuming the RandomSearch had n iterations or the GridSearch had n combinations in total, the output would have the following structure:: -------------------------------------------------- Best score: float using params: dict -------------------------------------------------- Idx: 0 - Score: float using params: dict ... Idx: n-1 - Score: float using params: dict -------------------------------------------------- Source code in tensorcross\\model_selection\\search_cv.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 def summary ( self ) -> None : \"\"\"Prints the summary of the search to the console. Assuming the *RandomSearch* had n iterations or the *GridSearch* had n combinations in total, the output would have the following structure:: -------------------------------------------------- Best score: ``float`` using params: ``dict`` -------------------------------------------------- Idx: 0 - Score: ``float`` using params: ``dict`` ... Idx: n-1 - Score: ``float`` using params: ``dict`` -------------------------------------------------- \"\"\" best_params_str = ( f \"Best score: { self . results_ [ 'best_score' ] } \" f \"using params: { self . results_ [ 'best_params' ] } \" ) dashed_line = \"\" . join ( map ( lambda x : \"-\" , best_params_str )) print ( f \" \\n { dashed_line } \\n { best_params_str } \\n { dashed_line } \" ) scores = self . results_ [ \"val_scores\" ] params = self . results_ [ \"params\" ] for idx , ( score , param ) in enumerate ( zip ( scores , params )): print ( f \"Idx: { idx } - Score: { score } with param: { param } \" ) print ( f \" { dashed_line } \\n \" ) GridSearchCV __init__ ( self , model_fn , param_grid , n_folds = 3 , verbose = 0 , ** kwargs ) special GridSearch for a given parameter grid. The grid search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) This would sort the grid search combinations based on the validation mae score. Parameters: Name Type Description Default model_fn Callable[..., tensorflow.python.keras.engine.training.Model] Function that builds and compiles a tf.keras.models.Model object. required param_grid Mapping[str, Iterable] Dict of str, iterable hyperparameter, where the str is the parameter name of the. required n_folds int How many folds. Defaults to 3. 3 verbose int Whether to show information in terminal. Defaults to 0. 0 kwargs Any Keyword arguments for the model_fn function. {} Source code in tensorcross\\model_selection\\search_cv.py 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 def __init__ ( self , model_fn : Callable [ ... , tf . keras . models . Model ], param_grid : Mapping [ str , Iterable ], n_folds : int = 3 , verbose : int = 0 , ** kwargs : Any ) -> None : \"\"\"GridSearch for a given parameter grid. The grid search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. ```python model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) ``` This would sort the grid search combinations based on the validation mae score. Args: model_fn (Callable[..., tf.keras.models.Model]): Function that builds and compiles a tf.keras.models.Model object. param_grid (Mapping[str, Iterable]): Dict of str, iterable hyperparameter, where the str is the parameter name of the. n_folds (int): How many folds. Defaults to 3. verbose (int): Whether to show information in terminal. Defaults to 0. kwargs (Any): Keyword arguments for the model_fn function. \"\"\" super () . __init__ ( model_fn = model_fn , n_folds = n_folds , verbose = verbose , ** kwargs ) self . param_grid = ParameterGrid ( param_grid ) fit ( self , dataset , ** kwargs ) Runs the exhaustive grid search over the parameter grid. Parameters: Name Type Description Default dataset DatasetV2 tf.data.Dataset object for the training. required kwargs Any Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. {} Source code in tensorcross\\model_selection\\search_cv.py 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 def fit ( self , dataset : tf . data . Dataset , ** kwargs : Any ) -> None : \"\"\"Runs the exhaustive grid search over the parameter grid. Args: dataset (tf.data.Dataset): tf.data.Dataset object for the training. kwargs (Any): Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. \"\"\" super () . _run_search ( dataset = dataset , parameter_obj = self . param_grid , ** kwargs ) RandomSearchCV __init__ ( self , model_fn , param_distributions , n_iter = 10 , n_folds = 3 , verbose = 0 , ** kwargs ) special RandomSearch for a given parameter distribution. The random search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) This would sort the random search combinations based on the validation mae score. Parameters: Name Type Description Default model_fn Callable[..., tensorflow.python.keras.engine.training.Model] Function that builds and compiles a tf.keras.models.Model object. required param_distributions Dict[str, Callable] Dict of str, callable pairs, where the str is the parameter name of the. required n_iter int Number of random models. Defaults to 10. 10 n_folds int How many folds. Defaults to 3. 3 verbose int Whether to show information in terminal. Defaults to 0. 0 kwargs Any Keyword arguments for the model_fn function. {} Source code in tensorcross\\model_selection\\search_cv.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 def __init__ ( self , model_fn : Callable [ ... , tf . keras . models . Model ], param_distributions : Dict [ str , Callable ], n_iter : int = 10 , n_folds : int = 3 , verbose : int = 0 , ** kwargs : Any ) -> None : \"\"\"RandomSearch for a given parameter distribution. The random search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. ```python model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) ``` This would sort the random search combinations based on the validation mae score. Args: model_fn (Callable[..., tf.keras.models.Model]): Function that builds and compiles a tf.keras.models.Model object. param_distributions (Dict[str, Callable]): Dict of str, callable pairs, where the str is the parameter name of the. n_iter (int): Number of random models. Defaults to 10. n_folds (int): How many folds. Defaults to 3. verbose (int): Whether to show information in terminal. Defaults to 0. kwargs (Any): Keyword arguments for the model_fn function. \"\"\" super () . __init__ ( model_fn = model_fn , n_folds = n_folds , verbose = verbose , ** kwargs ) self . param_distributions = param_distributions self . n_iter = n_iter self . random_sampler = ParameterSampler ( self . param_distributions , n_iter = self . n_iter ) fit ( self , dataset , ** kwargs ) Runs the random search over the parameter distributions. Parameters: Name Type Description Default dataset DatasetV2 tf.data.Dataset object for the training. required kwargs Any Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. {} Source code in tensorcross\\model_selection\\search_cv.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 def fit ( self , dataset : tf . data . Dataset , ** kwargs : Any ) -> None : \"\"\"Runs the random search over the parameter distributions. Args: dataset (tf.data.Dataset): tf.data.Dataset object for the training. kwargs (Any): Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. \"\"\" super () . _run_search ( dataset = dataset , parameter_obj = self . random_sampler , ** kwargs ) utils special dataset dataset_split ( dataset , split_fraction , fold = 0 ) Splits the dataset into one chunk with split_fraction many elements of the original dataset and another chunk with size (1 - split_fraction) elements. Parameters: Name Type Description Default dataset DatasetV2 Dataset to be splitted. required split_fraction float Fraction of the dataset split. required fold int Which fold of the dataset, the validation set should be. 0 Returns: Type Description Tuple[tensorflow.python.data.ops.dataset_ops.DatasetV2, tensorflow.python.data.ops.dataset_ops.DatasetV2] Tuple[tf.data.Dataset, tf.data.Dataset]: Splitted datasets tuple. Source code in tensorcross\\utils\\dataset.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def dataset_split ( dataset : tf . data . Dataset , split_fraction : float , fold : int = 0 ) -> Tuple [ tf . data . Dataset , tf . data . Dataset ]: \"\"\"Splits the dataset into one chunk with split_fraction many elements of the original dataset and another chunk with size (1 - split_fraction) elements. Args: dataset (tf.data.Dataset): Dataset to be splitted. split_fraction (float): Fraction of the dataset split. fold (int): Which fold of the dataset, the validation set should be. Returns: Tuple[tf.data.Dataset, tf.data.Dataset]: Splitted datasets tuple. \"\"\" split_size = int ( len ( dataset ) * split_fraction ) offset_idx = fold * split_size val_dataset = dataset . skip ( offset_idx ) . take ( split_size ) first_train_folds = dataset . take ( offset_idx ) last_train_folds = dataset . skip ( offset_idx + split_size ) train_dataset = first_train_folds . concatenate ( last_train_folds ) return train_dataset , val_dataset","title":"API"},{"location":"api/#tensorcross","text":"","title":"tensorcross"},{"location":"api/#tensorcross.model_selection","text":"","title":"model_selection"},{"location":"api/#tensorcross.model_selection.search","text":"","title":"search"},{"location":"api/#tensorcross.model_selection.search.BaseSearch","text":"Abstract BaseSearch class for the grid or random search. Parameters: Name Type Description Default model_fn Callable[..., tf.keras.models.Model] Function that builds and compiles a tf.keras.models.Model object. required verbose int Whether to show information in terminal. Defaults to 0. required kwargs Any Keyword arguments for the model_fn function. required","title":"BaseSearch"},{"location":"api/#tensorcross.model_selection.search.BaseSearch.summary","text":"Prints the summary of the search to the console. Assuming the RandomSearch had n iterations or the GridSearch had n combinations in total, the output would have the following structure:: -------------------------------------------------- Best score: float using params: dict -------------------------------------------------- Idx: 0 - Score: float using params: dict ... Idx: n-1 - Score: float using params: dict -------------------------------------------------- Source code in tensorcross\\model_selection\\search.py 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def summary ( self ) -> None : \"\"\"Prints the summary of the search to the console. Assuming the *RandomSearch* had n iterations or the *GridSearch* had n combinations in total, the output would have the following structure:: -------------------------------------------------- Best score: ``float`` using params: ``dict`` -------------------------------------------------- Idx: 0 - Score: ``float`` using params: ``dict`` ... Idx: n-1 - Score: ``float`` using params: ``dict`` -------------------------------------------------- \"\"\" best_params_str = ( f \"Best score: { self . results_ [ 'best_score' ] } \" f \"using params: { self . results_ [ 'best_params' ] } \" ) dashed_line = \"\" . join ( map ( lambda x : \"-\" , best_params_str )) print ( f \" \\n { dashed_line } \\n { best_params_str } \\n { dashed_line } \" ) scores = self . results_ [ \"val_scores\" ] params = self . results_ [ \"params\" ] for idx , ( score , param ) in enumerate ( zip ( scores , params )): print ( f \"Idx: { idx } - Score: { score } with param: { param } \" ) print ( f \" { dashed_line } \\n \" )","title":"summary()"},{"location":"api/#tensorcross.model_selection.search.GridSearch","text":"","title":"GridSearch"},{"location":"api/#tensorcross.model_selection.search.GridSearch.__init__","text":"GridSearch for a given parameter grid. The grid search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) This would sort the grid search combinations based on the validation mae score. Parameters: Name Type Description Default model_fn Callable[..., tensorflow.python.keras.engine.training.Model] Function that builds and compiles a tf.keras.models.Model object. required param_grid Mapping[str, Iterable] Dict of str, iterable hyperparameter, where the str is the parameter name of the. required verbose int Whether to show information in terminal. Defaults to 0. 0 kwargs Any Keyword arguments for the model_fn function. {} Source code in tensorcross\\model_selection\\search.py 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 def __init__ ( self , model_fn : Callable [ ... , tf . keras . models . Model ], param_grid : Mapping [ str , Iterable ], verbose : int = 0 , ** kwargs : Any ) -> None : \"\"\"GridSearch for a given parameter grid. The grid search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. ```python model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) ``` This would sort the grid search combinations based on the validation mae score. Args: model_fn (Callable[..., tf.keras.models.Model]): Function that builds and compiles a tf.keras.models.Model object. param_grid (Mapping[str, Iterable]): Dict of str, iterable hyperparameter, where the str is the parameter name of the. verbose (int): Whether to show information in terminal. Defaults to 0. kwargs (Any): Keyword arguments for the model_fn function. \"\"\" super () . __init__ ( model_fn = model_fn , verbose = verbose , ** kwargs ) self . param_grid = ParameterGrid ( param_grid )","title":"__init__()"},{"location":"api/#tensorcross.model_selection.search.GridSearch.fit","text":"Runs the exhaustive grid search over the parameter grid. Parameters: Name Type Description Default train_dataset DatasetV2 tf.data.Dataset object for the training. required val_dataset DatasetV2 tf.data.Dataset object for the validation. required kwargs Any Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. {} Source code in tensorcross\\model_selection\\search.py 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 def fit ( self , train_dataset : tf . data . Dataset , val_dataset : tf . data . Dataset , ** kwargs : Any ) -> None : \"\"\"Runs the exhaustive grid search over the parameter grid. Args: train_dataset (tf.data.Dataset): tf.data.Dataset object for the training. val_dataset (tf.data.Dataset): tf.data.Dataset object for the validation. kwargs (Any): Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. \"\"\" super () . _run_search ( train_dataset = train_dataset , val_dataset = val_dataset , parameter_obj = self . param_grid , ** kwargs )","title":"fit()"},{"location":"api/#tensorcross.model_selection.search.RandomSearch","text":"","title":"RandomSearch"},{"location":"api/#tensorcross.model_selection.search.RandomSearch.__init__","text":"RandomSearch for a given parameter distribution. The random search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) This would sort the random search combinations based on the validation mae score. Parameters: Name Type Description Default model_fn Callable[..., tensorflow.python.keras.engine.training.Model] Function that builds and compiles a tf.keras.models.Model object. required param_distributions Dict[str, Callable] Dict of str, callable pairs, where the str is the parameter name of the. required n_iter int Number of random models. Defaults to 10. 10 verbose int Whether to show information in terminal. Defaults to 0. 0 kwargs Any Keyword arguments for the model_fn function. {} Source code in tensorcross\\model_selection\\search.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 def __init__ ( self , model_fn : Callable [ ... , tf . keras . models . Model ], param_distributions : Dict [ str , Callable ], n_iter : int = 10 , verbose : int = 0 , ** kwargs : Any ) -> None : \"\"\"RandomSearch for a given parameter distribution. The random search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. ```python model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) ``` This would sort the random search combinations based on the validation mae score. Args: model_fn (Callable[..., tf.keras.models.Model]): Function that builds and compiles a tf.keras.models.Model object. param_distributions (Dict[str, Callable]): Dict of str, callable pairs, where the str is the parameter name of the. n_iter (int): Number of random models. Defaults to 10. verbose (int): Whether to show information in terminal. Defaults to 0. kwargs (Any): Keyword arguments for the model_fn function. \"\"\" super () . __init__ ( model_fn = model_fn , verbose = verbose , ** kwargs ) self . param_distributions = param_distributions self . n_iter = n_iter self . random_sampler = ParameterSampler ( self . param_distributions , n_iter = self . n_iter )","title":"__init__()"},{"location":"api/#tensorcross.model_selection.search.RandomSearch.fit","text":"Runs the random search over the parameter distributions. Parameters: Name Type Description Default train_dataset DatasetV2 tf.data.Dataset object for the training. required val_dataset DatasetV2 tf.data.Dataset object for the validation. required kwargs Any Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. {} Source code in tensorcross\\model_selection\\search.py 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 def fit ( self , train_dataset : tf . data . Dataset , val_dataset : tf . data . Dataset , ** kwargs : Any ) -> None : \"\"\"Runs the random search over the parameter distributions. Args: train_dataset (tf.data.Dataset): tf.data.Dataset object for the training. val_dataset (tf.data.Dataset): tf.data.Dataset object for the validation. kwargs (Any): Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. \"\"\" super () . _run_search ( train_dataset = train_dataset , val_dataset = val_dataset , parameter_obj = self . random_sampler , ** kwargs )","title":"fit()"},{"location":"api/#tensorcross.model_selection.search_cv","text":"","title":"search_cv"},{"location":"api/#tensorcross.model_selection.search_cv.BaseSearchCV","text":"Abstract BaseSearchCV class for the grid or random search with cross validation. Parameters: Name Type Description Default model_fn Callable[..., tf.keras.models.Model] Function that builds and compiles a tf.keras.models.Model object. required n_folds int How many folds. Defaults to 3. required verbose int Whether to show information in terminal. Defaults to 0. required kwargs Any Keyword arguments for the model_fn function. required","title":"BaseSearchCV"},{"location":"api/#tensorcross.model_selection.search_cv.BaseSearchCV.summary","text":"Prints the summary of the search to the console. Assuming the RandomSearch had n iterations or the GridSearch had n combinations in total, the output would have the following structure:: -------------------------------------------------- Best score: float using params: dict -------------------------------------------------- Idx: 0 - Score: float using params: dict ... Idx: n-1 - Score: float using params: dict -------------------------------------------------- Source code in tensorcross\\model_selection\\search_cv.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 def summary ( self ) -> None : \"\"\"Prints the summary of the search to the console. Assuming the *RandomSearch* had n iterations or the *GridSearch* had n combinations in total, the output would have the following structure:: -------------------------------------------------- Best score: ``float`` using params: ``dict`` -------------------------------------------------- Idx: 0 - Score: ``float`` using params: ``dict`` ... Idx: n-1 - Score: ``float`` using params: ``dict`` -------------------------------------------------- \"\"\" best_params_str = ( f \"Best score: { self . results_ [ 'best_score' ] } \" f \"using params: { self . results_ [ 'best_params' ] } \" ) dashed_line = \"\" . join ( map ( lambda x : \"-\" , best_params_str )) print ( f \" \\n { dashed_line } \\n { best_params_str } \\n { dashed_line } \" ) scores = self . results_ [ \"val_scores\" ] params = self . results_ [ \"params\" ] for idx , ( score , param ) in enumerate ( zip ( scores , params )): print ( f \"Idx: { idx } - Score: { score } with param: { param } \" ) print ( f \" { dashed_line } \\n \" )","title":"summary()"},{"location":"api/#tensorcross.model_selection.search_cv.GridSearchCV","text":"","title":"GridSearchCV"},{"location":"api/#tensorcross.model_selection.search_cv.GridSearchCV.__init__","text":"GridSearch for a given parameter grid. The grid search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) This would sort the grid search combinations based on the validation mae score. Parameters: Name Type Description Default model_fn Callable[..., tensorflow.python.keras.engine.training.Model] Function that builds and compiles a tf.keras.models.Model object. required param_grid Mapping[str, Iterable] Dict of str, iterable hyperparameter, where the str is the parameter name of the. required n_folds int How many folds. Defaults to 3. 3 verbose int Whether to show information in terminal. Defaults to 0. 0 kwargs Any Keyword arguments for the model_fn function. {} Source code in tensorcross\\model_selection\\search_cv.py 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 def __init__ ( self , model_fn : Callable [ ... , tf . keras . models . Model ], param_grid : Mapping [ str , Iterable ], n_folds : int = 3 , verbose : int = 0 , ** kwargs : Any ) -> None : \"\"\"GridSearch for a given parameter grid. The grid search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. ```python model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) ``` This would sort the grid search combinations based on the validation mae score. Args: model_fn (Callable[..., tf.keras.models.Model]): Function that builds and compiles a tf.keras.models.Model object. param_grid (Mapping[str, Iterable]): Dict of str, iterable hyperparameter, where the str is the parameter name of the. n_folds (int): How many folds. Defaults to 3. verbose (int): Whether to show information in terminal. Defaults to 0. kwargs (Any): Keyword arguments for the model_fn function. \"\"\" super () . __init__ ( model_fn = model_fn , n_folds = n_folds , verbose = verbose , ** kwargs ) self . param_grid = ParameterGrid ( param_grid )","title":"__init__()"},{"location":"api/#tensorcross.model_selection.search_cv.GridSearchCV.fit","text":"Runs the exhaustive grid search over the parameter grid. Parameters: Name Type Description Default dataset DatasetV2 tf.data.Dataset object for the training. required kwargs Any Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. {} Source code in tensorcross\\model_selection\\search_cv.py 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 def fit ( self , dataset : tf . data . Dataset , ** kwargs : Any ) -> None : \"\"\"Runs the exhaustive grid search over the parameter grid. Args: dataset (tf.data.Dataset): tf.data.Dataset object for the training. kwargs (Any): Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. \"\"\" super () . _run_search ( dataset = dataset , parameter_obj = self . param_grid , ** kwargs )","title":"fit()"},{"location":"api/#tensorcross.model_selection.search_cv.RandomSearchCV","text":"","title":"RandomSearchCV"},{"location":"api/#tensorcross.model_selection.search_cv.RandomSearchCV.__init__","text":"RandomSearch for a given parameter distribution. The random search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) This would sort the random search combinations based on the validation mae score. Parameters: Name Type Description Default model_fn Callable[..., tensorflow.python.keras.engine.training.Model] Function that builds and compiles a tf.keras.models.Model object. required param_distributions Dict[str, Callable] Dict of str, callable pairs, where the str is the parameter name of the. required n_iter int Number of random models. Defaults to 10. 10 n_folds int How many folds. Defaults to 3. 3 verbose int Whether to show information in terminal. Defaults to 0. 0 kwargs Any Keyword arguments for the model_fn function. {} Source code in tensorcross\\model_selection\\search_cv.py 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 def __init__ ( self , model_fn : Callable [ ... , tf . keras . models . Model ], param_distributions : Dict [ str , Callable ], n_iter : int = 10 , n_folds : int = 3 , verbose : int = 0 , ** kwargs : Any ) -> None : \"\"\"RandomSearch for a given parameter distribution. The random search is evaluated by the either the validation loss value, if no metrics are passed to the compile function, or the validation score of the last defined metric is used. ```python model.compile(loss=\"mse\", metrics=[\"mse\", \"mae\"]) ``` This would sort the random search combinations based on the validation mae score. Args: model_fn (Callable[..., tf.keras.models.Model]): Function that builds and compiles a tf.keras.models.Model object. param_distributions (Dict[str, Callable]): Dict of str, callable pairs, where the str is the parameter name of the. n_iter (int): Number of random models. Defaults to 10. n_folds (int): How many folds. Defaults to 3. verbose (int): Whether to show information in terminal. Defaults to 0. kwargs (Any): Keyword arguments for the model_fn function. \"\"\" super () . __init__ ( model_fn = model_fn , n_folds = n_folds , verbose = verbose , ** kwargs ) self . param_distributions = param_distributions self . n_iter = n_iter self . random_sampler = ParameterSampler ( self . param_distributions , n_iter = self . n_iter )","title":"__init__()"},{"location":"api/#tensorcross.model_selection.search_cv.RandomSearchCV.fit","text":"Runs the random search over the parameter distributions. Parameters: Name Type Description Default dataset DatasetV2 tf.data.Dataset object for the training. required kwargs Any Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. {} Source code in tensorcross\\model_selection\\search_cv.py 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 def fit ( self , dataset : tf . data . Dataset , ** kwargs : Any ) -> None : \"\"\"Runs the random search over the parameter distributions. Args: dataset (tf.data.Dataset): tf.data.Dataset object for the training. kwargs (Any): Keyword arguments for the fit method of the tf.keras.models.Model or tf.keras.models.Sequential model. \"\"\" super () . _run_search ( dataset = dataset , parameter_obj = self . random_sampler , ** kwargs )","title":"fit()"},{"location":"api/#tensorcross.utils","text":"","title":"utils"},{"location":"api/#tensorcross.utils.dataset","text":"","title":"dataset"},{"location":"api/#tensorcross.utils.dataset.dataset_split","text":"Splits the dataset into one chunk with split_fraction many elements of the original dataset and another chunk with size (1 - split_fraction) elements. Parameters: Name Type Description Default dataset DatasetV2 Dataset to be splitted. required split_fraction float Fraction of the dataset split. required fold int Which fold of the dataset, the validation set should be. 0 Returns: Type Description Tuple[tensorflow.python.data.ops.dataset_ops.DatasetV2, tensorflow.python.data.ops.dataset_ops.DatasetV2] Tuple[tf.data.Dataset, tf.data.Dataset]: Splitted datasets tuple. Source code in tensorcross\\utils\\dataset.py 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 def dataset_split ( dataset : tf . data . Dataset , split_fraction : float , fold : int = 0 ) -> Tuple [ tf . data . Dataset , tf . data . Dataset ]: \"\"\"Splits the dataset into one chunk with split_fraction many elements of the original dataset and another chunk with size (1 - split_fraction) elements. Args: dataset (tf.data.Dataset): Dataset to be splitted. split_fraction (float): Fraction of the dataset split. fold (int): Which fold of the dataset, the validation set should be. Returns: Tuple[tf.data.Dataset, tf.data.Dataset]: Splitted datasets tuple. \"\"\" split_size = int ( len ( dataset ) * split_fraction ) offset_idx = fold * split_size val_dataset = dataset . skip ( offset_idx ) . take ( split_size ) first_train_folds = dataset . take ( offset_idx ) last_train_folds = dataset . skip ( offset_idx + split_size ) train_dataset = first_train_folds . concatenate ( last_train_folds ) return train_dataset , val_dataset","title":"dataset_split()"}]}